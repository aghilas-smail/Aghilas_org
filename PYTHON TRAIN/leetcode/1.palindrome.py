# https://leetcode.com/problems/remove-palindromic-subsequences/

"""
1332. Remove Palindromic Subsequences
Easy
Topics
Companies
Hint
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
"""
class Solution(object):
    def removePalindromeSub(self, s):
        if s is None:
            return 0
        elif s == s[::-1]: # du coup de ::-1 sert a dire si on peut la lire de gauche a droit et l'inverse
            return 1
        else:
            return 2

# test case
solution = Solution()
print(solution.removePalindromeSub("ababa"))


#Avec une boucle 

# def is_palindrome(s):
#     left = 0
#     right = len(s) - 1
    
#     while left < right:
#         if s[left] != s[right]:
#             return False
#         left += 1
#         right -= 1
    
#     return True


# print(is_palindrome("ababa"))  
# print(is_palindrome("abb"))    
# print(is_palindrome("baabb"))  
